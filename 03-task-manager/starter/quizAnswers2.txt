1. In this lesson, you created a middleware function called asyncWrapper. Why?
To avoid duplicate (or repeating) trycatch block in everu controller function (CRUD).

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

class CustomAPIError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
}
const createCustomerror = (msg, statusCode) => {
    return new CustomAPIError(msg, statusCode);
};

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    // your code here    
    const error = createCustomError(`No task with id: ${taskID}`, 404);
    return res.status(error.status).json({ msg: error.message });
  }  
  res.status(200).json({ task });  
}); 